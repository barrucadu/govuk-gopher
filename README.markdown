GOV.UK to Gopher
================

Gopher is a simple text-based protocol to browse information through a
system of hierarchical menus.  Gopher has a number of advantages:

- It's been around for a long time, so clients are *really* stable.
- It's screen-reader-friendly!  There's no pesky markup, just plain
  text and links.
- It came out of a university, which means it's good.

How can a source of information be truly accessible if it's not on
Gopher?  And yet, GOV.UK is *not available* to Gopher users!

Until now.


Usage (server)
--------------

Install the dependencies, then run `server.py`.  There are environment
variables to control the IP and port it listens on (defaulting to
`127.0.0.1:70`).

```bash
$ virtualenv venv
$ source venv/bin/activate
$ pip install -r requirements.txt
$ IP="..." PORT="..." ./server.py
```

Assuming you don't want to run this as root, pick a port above 1024.


Usage (client)
--------------

Use any Gopher client.  For example, lynx:

```bash
$ lynx gopher://localhost:7070
$ lynx gopher://localhost:7070/1/
$ lynx gopher://localhost:7070/1/vehicle-tax
```

### URLs

Gopher has no headers.  The URL determines the type the client will
interpret the server's response as: that's the `/1` at the beginning.

If the type isn't given:

```bash
$ lynx gopher://localhost:7070/vehicle-tax
```

The client (or lynx at least) mangles the request, interpreting that
as a request for `ehicle-tax` of type `v`.  So you get this:

```
iCould not understand "ehicle-tax"
i
iRequests should be paths on GOV.UK.
```


Technical details
-----------------

This uses the GOV.UK content API.  For a page `www.gov.uk/<path>`, the
associated content item can be fetched from
`www.gov.uk/api/content/<path>`.

It's not really intended to be a public API, in particular it has no
versioning, so on your head be it if you try to use it for something
serious.

A content item looks something like this:

```json
{ "document_type": ""
, "title": ""
, "description": ""
, "public_updated_at": ""
, "links":
  { "mainstream_browse_pages": []
  , "ordered_related_items": []
  , "organisations": []
  , "parent": []
  , "suggested_ordered_related_items": []
  , "taxons": []
  }
, "details": {}
}
```

The `document_type` determines the exact set of keys in the `links`
hash, and the format of the `details` hash.  The `links` hash is
essentially a pre-computed `JOIN`.

Adding support for a new document type consists of adding a function
`parse_details_<type>` to the `content_schemas.py` file, which turns
the `details` hash into a list of elements which will be rendered as
the "body" of the response.

The Gopher response is generated by the `render` function in
`gopher.py`, and has this format:

```
title
public_updated_at

-------------------------------------------------------------------------------

description

-------------------------------------------------------------------------------

rendered details hash

-------------------------------------------------------------------------------

rendered links hash
```

The parsing and rendering of the `links` hash is generic over all
document types, even though some sorts of links are only present for
some document types.  This is fine as there is a curated list of which
sorts of links are interesting, and all links of those sorts are
extracted from the content item.

There is no caching or rate limiting on talking to the GOV.UK API.
